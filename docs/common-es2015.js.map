{"version":3,"sources":["./src/app/common/colors.enum.ts","./src/app/three/services/three.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA,IAAY,MAMX;AAND,WAAY,MAAM;IACd,yBAAe;IACf,2BAAiB;IACjB,sCAA4B;IAC5B,4BAAkB;AAEtB,CAAC,EANW,MAAM,KAAN,MAAM,QAMjB;;;;;;;;;;;;;;;;;;;;;ACN0C;AACZ;AACqB;AACsB;AAI1E,IAAa,YAAY,GAAzB,MAAa,YAAY;IAEvB,gBAAgB,CAAC;IAEnB,cAAc,CAAC,QAAQ;QACnB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,IAAI,2CAAW,EAAE;YACxB,QAAQ,EAAE,IAAI,mDAAmB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAC,IAAI,EAAC,CAAC;YACtE,MAAM,EAAE,IAAI,uDAAuB,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1C,QAAQ,EAAG,EAAE;SACd;QACD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,YAAY,CAAC;QACpE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,kDAAkB,CAAE,QAAQ,EAAE,CAAC,CAAE,CAAC,CAAC;QACxD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3F,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,oBAAoB;QAClB,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,IAAI,2CAAW,EAAE;YACxB,QAAQ,EAAE,IAAI,mDAAmB,EAAE;YACnC,MAAM,EAAE,IAAI,uDAAuB,EAAE;SACtC;QACD,MAAM,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,2CAAW,CAAC,iEAAM,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC;QAC/B,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ;QAC3C,KAAK,CAAC,UAAU,GAAG,IAAI,2CAAW,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,KAAK,GAAG,IAAI,kDAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAAmB;QACnE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjB,MAAM,QAAQ,GAAG,IAAI,uFAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/B,QAAQ,CAAC,MAAM,EAAE,CAAC;QAClB,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAtCY,YAAY;IAHxB,gEAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,YAAY,CAsCxB;AAtCwB","file":"common-es2015.js","sourcesContent":["export enum Colors {\n    red = '#F97664',\n    green = '#C8FF67',\n    canvasBackground = '#ECFCF9',\n    yellow = '#F9E764'\n\n}\n","import { Injectable } from '@angular/core';\nimport * as THREE from 'three';\nimport { Colors } from 'src/app/common/colors.enum';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThreeService {\n\n  constructor() { }\n\ngetThreeCommon(canvasEl): { scene: any, renderer: any, camera: any, controls: any } {\n    const common = {\n      scene: new THREE.Scene(),\n      renderer: new THREE.WebGLRenderer({ canvas: canvasEl ,antialias:true}),\n      camera: new THREE.PerspectiveCamera(75, 2),\n      controls : {}\n    }\n    common.renderer.setSize(canvasEl.offsetWidth, canvasEl.offsetHeight)\n    common.scene.add(new THREE.AmbientLight( 0xffffff, 1 ));\n    common.controls = this.configureViewSettings(common.scene, common.camera, common.renderer);\n    return common;\n  }\n\n  getThreeCommonWindow() {\n    const common = {\n      scene: new THREE.Scene(),\n      renderer: new THREE.WebGLRenderer(),\n      camera: new THREE.PerspectiveCamera(),\n    }\n    common.scene.background = new THREE.Color(Colors.canvasBackground);\n    common.renderer.setSize(window.innerWidth, window.innerHeight);\n    common.camera.position.z = 100;\n    return common;\n  }\n\n  configureViewSettings(scene, camera, renderer) {\n    scene.background = new THREE.Color('white');\n    const light = new THREE.AmbientLight(0x404040); // soft white light\n    scene.add(light);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 0, 100);\n    controls.update();\n    return controls;\n  }\n}\n"],"sourceRoot":""}