{"version":3,"sources":["./src/app/network-graph/components/group-layout/group-layout.component.html","./src/app/network-graph/components/group-layout/group-layout.component.ts","./src/app/network-graph/network-graph-routing.module.ts","./src/app/network-graph/network-graph.module.ts","./src/app/network-graph/services/network-graph-request.service.ts"],"names":[],"mappings":"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","file":"network-graph-network-graph-module-ngfactory-es5.js","sourcesContent":["<section #stats>\n    <h3>Group Layout</h3>\n    <h6>Render Calls: {{renderCalls}}    Object Count: {{objectCount}} </h6>\n    <div class=\"app--margin__vertical object-range\">\n        <input\n          type=\"range\"\n          id=\"points\"\n          name=\"points\"\n          min=\"3\"\n          max=\"100\"\n          step=\"1\"\n          (change)=\"objectCountChangeHandler($event)\"\n          [value]=\"objectCount\"\n        />\n      </div>\n    <canvas\n      height=\"500\"\n      width=\"1000\"\n      #canvasEl\n      (click)=\"clickHandler($event)\"\n    ></canvas>\n  </section>","/**\n * TODO: check if other possibilities are there for loaded mesh. current 'Group'.\n * TODO: Groups Texture.\n */\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  ViewChild,\n} from \"@angular/core\";\nimport { forkJoin } from \"rxjs\";\nimport { ThreeService } from \"src/app/three/services/three.service\";\nimport * as THREE from \"three\";\nimport * as Stats from \"../../../../../node_modules/stats.js/build/stats.min.js\";\nimport { NetworkGraphRequestService } from \"../../services/network-graph-request.service.js\";\n\n@Component({\n  selector: \"app-group-layout\",\n  templateUrl: \"./group-layout.component.html\",\n  styleUrls: [\"./group-layout.component.scss\"],\n})\nexport class GroupLayoutComponent implements OnInit, AfterViewInit {\n  threeCommon: { scene: any; renderer: any; camera: any; controls: any };\n\n  @ViewChild(\"canvasEl\", { static: false, read: ElementRef })\n  canvasEl: ElementRef;\n  @ViewChild(\"stats\", { static: false, read: ElementRef }) statsEl: ElementRef;\n  stats: any;\n\n  // layout class members\n  layoutGeometry: THREE.CircleGeometry;\n  layoutMaterial: THREE.MeshBasicMaterial;\n\n  // performance class memebers.\n  renderCalls: any;\n  objectCount: number = 3;\n  layoutMesh: THREE.Mesh<THREE.CircleGeometry, THREE.MeshBasicMaterial>;\n  nodeMesh: THREE.InstancedMesh<any, THREE.MeshNormalMaterial | any>;\n  instancedNodeMesh: THREE.InstancedMesh<\n    THREE.InstancedBufferGeometry | THREE.BufferGeometry,\n    THREE.MeshBasicMaterial\n  >;\n\n  // Level 1 Response;\n  groupsData: Object;\n\n  // connections\n\n  constructor(\n    private threeService: ThreeService,\n    private graphRequestService: NetworkGraphRequestService\n  ) {}\n\n  ngOnInit() {\n    this.initRequests();\n  }\n\n  ngAfterViewInit(): void {\n    this.threeCommon = this.threeService.getThreeCommon(\n      this.canvasEl.nativeElement,\n      true\n    );\n    this.setUpStats();\n    this.setUpHelpers();\n    this.threeCommon.camera.position.z = 20;\n    this.threeCommon.camera.aspect =\n      this.canvasEl.nativeElement.offsetWidth /\n      this.canvasEl.nativeElement.offsetHeight;\n    this.threeCommon.renderer.setPixelRatio(window.devicePixelRatio);\n    this.threeCommon.scene.background = \"black\";\n    this.threeCommon.camera.updateProjectionMatrix();\n  }\n\n  initRequests() {\n    forkJoin(\n      this.graphRequestService.getGroups(),\n      this.graphRequestService.getNodeMesh()\n    ).subscribe(([groupData, mesh]) => {\n      this.nodeMeshResponseHandler(mesh);\n      this.groupsResponseHandler(groupData);\n    });\n  }\n\n  nodeMeshResponseHandler(mesh) {\n    if (mesh.type && mesh.type === \"Group\") {\n      this.nodeMesh = mesh.children[0];\n    } else {\n      this.nodeMesh = mesh;\n    }\n  }\n\n  groupsResponseHandler(groupData: Object) {\n    this.groupsData = groupData;\n    this.objectCount = this.groupsData[\"data\"].length;\n    this.initLayout();\n    this.constructNodes();\n    this.renderView();\n  }\n\n  initLayout() {\n    this.threeService.cleanScene(this.threeCommon);\n    const radiusOffset = Math.floor(this.objectCount / 10);\n    this.layoutGeometry = new THREE.CircleGeometry(\n      10 + radiusOffset * radiusOffset,\n      this.objectCount,\n      0,\n      2 * Math.PI\n    );\n    this.layoutMaterial = new THREE.MeshPhongMaterial({\n      color: \"white\",\n      transparent: true,\n      opacity: 0.3,\n    });\n    this.layoutMesh = new THREE.Mesh(this.layoutGeometry, this.layoutMaterial);\n    // this.layoutMesh.rotateX(-1);\n    // this.layoutMesh.upda\n    this.threeCommon.scene.add(this.layoutMesh);\n  }\n\n  setUpHelpers() {\n    this.threeCommon.scene.add(new THREE.AxesHelper(50));\n  }\n\n  constructNodes() {\n    this.instancedNodeMesh = new THREE.InstancedMesh(\n      this.nodeMesh.geometry,\n      this.nodeMesh.material,\n      this.objectCount\n    );\n    console.log(this.instancedNodeMesh);\n    for (var i = 0; i < this.objectCount; i++) {\n      //using indexes as id.\n      this.instancedNodeMesh.setMatrixAt(i, this.setPositionFromLayout(i));\n    }\n    this.threeCommon.scene.add(this.instancedNodeMesh);\n  }\n\n  setPositionFromLayout(i: number): THREE.Matrix4 {\n    const matrix = new THREE.Matrix4();\n    var position = new THREE.Vector3();\n    var rotation = new THREE.Euler();\n    var quaternion = new THREE.Quaternion();\n    var scale = new THREE.Vector3();\n    if (!this.layoutGeometry.vertices[i]) {\n      console.log(\"no vertex for index\", i + 1);\n    }\n    position = this.layoutGeometry.vertices[i + 1];\n    quaternion.setFromEuler(rotation);\n    scale.x = scale.y = scale.z = 1;\n    matrix.compose(position, quaternion, scale);\n    return matrix;\n  }\n\n  setUpStats() {\n    this.stats = new Stats();\n    this.stats.showPanel(1); // 0: fps, 1: ms, 2: mb, 3+: custom\n    this.statsEl.nativeElement.appendChild(this.stats.dom);\n    this.stats.update();\n  }\n\n  updateStats() {\n    window.requestAnimationFrame(this.updateStats.bind(this));\n  }\n\n  clickHandler($event) {}\n  private renderView() {\n    this.threeCommon.renderer.render(\n      this.threeCommon.scene,\n      this.threeCommon.camera\n    );\n    this.threeCommon.controls.update();\n    window.requestAnimationFrame(this.renderView.bind(this));\n    this.stats.update();\n    this.renderCalls = this.threeCommon.renderer.info.render.calls;\n  }\n\n  objectCountChangeHandler($event) {\n    this.threeService.cleanScene(this.threeCommon);\n    this.objectCount = Number.parseInt($event.target.value, 10);\n    this.sceneController();\n  }\n\n  private sceneController() {\n    this.initLayout();\n    this.constructNodes();\n    this.constructConnection();\n    this.renderView();\n  }\n  constructConnection() {\n    var material = new THREE.LineBasicMaterial({ color: 0x0000ff });\n    var points = [];\n    points.push(this.layoutMesh.geometry);\n    points.push(new THREE.Vector3(0, 10, 0));\n    points.push(new THREE.Vector3(10, 0, 0));\n    var geometry = new THREE.BufferGeometry().setFromPoints(points);\n    var line = new THREE.Line(geometry, material);\n    this.threeCommon.scene.add(line);\n  }\n}\n","import { Component, NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { NetworkGraphRoutes } from \"../common/enums/network-graph-routes.enum\";\nimport { GroupLayoutComponent } from \"./components/group-layout/group-layout.component\";\n\nconst routes: Routes = [\n  {\n    path: `${NetworkGraphRoutes.groupLayout}`,\n    component: GroupLayoutComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NetworkGraphRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NetworkGraphRoutingModule } from './network-graph-routing.module';\nimport { GroupLayoutComponent } from './components/group-layout/group-layout.component';\n\n\n@NgModule({\n  declarations: [GroupLayoutComponent],\n  imports: [\n    CommonModule,\n    NetworkGraphRoutingModule\n  ]\n})\nexport class NetworkGraphModule { }\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { from } from \"rxjs\";\nimport { OBJLoader } from \"./../../../../node_modules/three/examples/jsm/loaders/OBJLoader\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NetworkGraphRequestService {\n  private GEOMETRY_URL = \"assets/network-graph/geometry/node.obj\";\n  private MOCK_GROUPS_URL = \"assets/network-graph/server/groups.json\";\n  constructor(private httpClient: HttpClient) {}\n\n  getNodeMesh() {\n    return from(new OBJLoader().loadAsync(this.GEOMETRY_URL));\n  }\n\n  getGroups() {\n    return this.httpClient.get(this.MOCK_GROUPS_URL);\n  }\n}\n"],"sourceRoot":""}